// <auto-generated />
using System;
using Foosball.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Foosball.Infrastructure.Migrations
{
    [DbContext(typeof(FoosballDbContext))]
    partial class FoosballDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Foosball.Infrastructure.Entities.GoalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOwnGoal")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MatchEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ScoredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ScoringPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MatchEntityId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Foosball.Infrastructure.Entities.MatchEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Team1AttackerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Team1DefenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Team2AttackerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Team2DefenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Foosball.Infrastructure.Entities.PlayerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Foosball.Infrastructure.Entities.GoalEntity", b =>
                {
                    b.HasOne("Foosball.Infrastructure.Entities.MatchEntity", null)
                        .WithMany("Goals")
                        .HasForeignKey("MatchEntityId");
                });

            modelBuilder.Entity("Foosball.Infrastructure.Entities.MatchEntity", b =>
                {
                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
