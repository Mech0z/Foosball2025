// <auto-generated />
using System;
using Foosball.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Foosball.Infrastructure.Migrations
{
    [DbContext(typeof(FoosballDbContext))]
    [Migration("20250811191554_RefactorEntities")]
    partial class RefactorEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Foosball.Infrastructure.Entities.GoalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOwnGoal")
                        .HasColumnType("bit");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScoringPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Foosball.Infrastructure.Entities.MatchEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FinishedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Team1AttackerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Team1DefenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Team2AttackerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Team2DefenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Team1AttackerId");

                    b.HasIndex("Team1DefenderId");

                    b.HasIndex("Team2AttackerId");

                    b.HasIndex("Team2DefenderId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Foosball.Infrastructure.Entities.PlayerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Foosball.Infrastructure.Entities.GoalEntity", b =>
                {
                    b.HasOne("Foosball.Infrastructure.Entities.MatchEntity", "Match")
                        .WithMany("Goals")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Foosball.Infrastructure.Entities.MatchEntity", b =>
                {
                    b.HasOne("Foosball.Infrastructure.Entities.PlayerEntity", "Team1Attacker")
                        .WithMany()
                        .HasForeignKey("Team1AttackerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foosball.Infrastructure.Entities.PlayerEntity", "Team1Defender")
                        .WithMany()
                        .HasForeignKey("Team1DefenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foosball.Infrastructure.Entities.PlayerEntity", "Team2Attacker")
                        .WithMany()
                        .HasForeignKey("Team2AttackerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Foosball.Infrastructure.Entities.PlayerEntity", "Team2Defender")
                        .WithMany()
                        .HasForeignKey("Team2DefenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team1Attacker");

                    b.Navigation("Team1Defender");

                    b.Navigation("Team2Attacker");

                    b.Navigation("Team2Defender");
                });

            modelBuilder.Entity("Foosball.Infrastructure.Entities.MatchEntity", b =>
                {
                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
